{"ast":null,"code":"var _jsxFileName = \"/home/vayne/Desktop/drawingthings/src/componets/canvus/canvus.jsx\";\nimport React, { useState, useEffect } from 'react';\n/*\nclass Canvas extends React.Component {\n    constructor(props) {\n        super(props) \n        this.state = {color:\"null\", painting:false }\n        this.ctx = ''\n        this.startdraw = this.startdraw.bind(this)\n        this.enddraw = this.enddraw.bind(this)\n        this.draw = this.draw.bind(this)\n        \n    }\n    componentDidMount() {\n        console.log(this.props.color)\n        const canvus = document.getElementById('canvus')\n        this.ctx = canvus.getContext('2d');\n        this.ctx.strokeStyle = this.props.color\n        canvus.height = window.innerHeight - window.innerHeight * 0.004\n        canvus.width = window.innerWidth - window.innerWidth * 0.004\n        window.addEventListener(\"resize\", () => {\n            canvus.height = window.innerHeight - window.innerHeight * 0.004\n            canvus.width = window.innerWidth - window.innerWidth * 0.004\n\n        });\n       \n    }\n    startdraw() {\n        this.setState({painting:true})\n    }\n    enddraw() {\n        \n        this.setState({painting:false})\n        this.ctx.beginPath();\n    }\n    draw(e) {\n        if (this.state.painting) {\n            this.ctx.lineWidth = 10;\n            this.ctx.lineCap = \"round\";\n            this.ctx.lineTo(e.clientX, e.clientY - 25);\n            this.ctx.stroke();\n            this.ctx.beginPath();\n            this.ctx.moveTo(e.clientX, e.clientY -25);\n        }\n        else {\n            return;\n        }\n    }\n\n    \n    render() {\n        return (\n            <canvas id=\"canvus\" onMouseDown={this.startdraw} onMouseUp={this.enddraw} onMouseMove={this.draw}/>\n        );\n    }\n}\n*/\n\nfunction Canvas(props) {\n  const [painting, setPainting] = useState(false);\n  const [ctx, setCtx] = useState(null);\n  console.log(props.color);\n  useEffect(() => {\n    const canvus = document.getElementById('canvus');\n    const newctx = canvus.getContext('2d');\n    setCtx(newctx);\n    newctx.strokeStyle = props.color;\n    canvus.height = window.innerHeight - window.innerHeight * 0.004;\n    canvus.width = window.innerWidth - window.innerWidth * 0.004;\n    window.addEventListener(\"resize\", () => {\n      canvus.height = window.innerHeight - window.innerHeight * 0.004;\n      canvus.width = window.innerWidth - window.innerWidth * 0.004;\n    });\n  });\n\n  function startdraw() {\n    setPainting(true);\n  }\n\n  function enddraw() {\n    setPainting(false); //ctx.beginPath();\n  }\n\n  function draw(e) {\n    if (painting) {\n      ctx.lineWidth = 10;\n      ctx.lineCap = \"round\";\n      ctx.lineTo(e.clientX, e.clientY - 25);\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.moveTo(e.clientX, e.clientY - 25);\n    } else {\n      return;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    id: \"canvus\",\n    onMouseDown: startdraw,\n    onMouseUp: enddraw,\n    onMouseMove: draw,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  });\n}\n\nexport default Canvas;","map":{"version":3,"sources":["/home/vayne/Desktop/drawingthings/src/componets/canvus/canvus.jsx"],"names":["React","useState","useEffect","Canvas","props","painting","setPainting","ctx","setCtx","console","log","color","canvus","document","getElementById","newctx","getContext","strokeStyle","height","window","innerHeight","width","innerWidth","addEventListener","startdraw","enddraw","draw","e","lineWidth","lineCap","lineTo","clientX","clientY","stroke","beginPath","moveTo"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACnB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACM,GAAD,EAAOC,MAAP,IAAiBP,QAAQ,CAAC,IAAD,CAA/B;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACO,KAAlB;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAf;AACA,UAAMC,MAAM,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAf;AACAR,IAAAA,MAAM,CAACO,MAAD,CAAN;AACAA,IAAAA,MAAM,CAACE,WAAP,GAAqBb,KAAK,CAACO,KAA3B;AACAC,IAAAA,MAAM,CAACM,MAAP,GAAgBC,MAAM,CAACC,WAAP,GAAqBD,MAAM,CAACC,WAAP,GAAqB,KAA1D;AACAR,IAAAA,MAAM,CAACS,KAAP,GAAeF,MAAM,CAACG,UAAP,GAAoBH,MAAM,CAACG,UAAP,GAAoB,KAAvD;AACAH,IAAAA,MAAM,CAACI,gBAAP,CAAwB,QAAxB,EAAkC,MAAM;AACtCX,MAAAA,MAAM,CAACM,MAAP,GAAgBC,MAAM,CAACC,WAAP,GAAqBD,MAAM,CAACC,WAAP,GAAqB,KAA1D;AACAR,MAAAA,MAAM,CAACS,KAAP,GAAeF,MAAM,CAACG,UAAP,GAAoBH,MAAM,CAACG,UAAP,GAAoB,KAAvD;AACC,KAHH;AAIC,GAXM,CAAT;;AAaA,WAASE,SAAT,GAAqB;AACjBlB,IAAAA,WAAW,CAAC,IAAD,CAAX;AACH;;AACD,WAASmB,OAAT,GAAmB;AAEfnB,IAAAA,WAAW,CAAC,KAAD,CAAX,CAFe,CAGf;AACH;;AACD,WAASoB,IAAT,CAAcC,CAAd,EAAiB;AACb,QAAItB,QAAJ,EAAc;AACVE,MAAAA,GAAG,CAACqB,SAAJ,GAAgB,EAAhB;AACArB,MAAAA,GAAG,CAACsB,OAAJ,GAAc,OAAd;AACAtB,MAAAA,GAAG,CAACuB,MAAJ,CAAWH,CAAC,CAACI,OAAb,EAAsBJ,CAAC,CAACK,OAAF,GAAY,EAAlC;AACAzB,MAAAA,GAAG,CAAC0B,MAAJ;AACA1B,MAAAA,GAAG,CAAC2B,SAAJ;AACA3B,MAAAA,GAAG,CAAC4B,MAAJ,CAAWR,CAAC,CAACI,OAAb,EAAsBJ,CAAC,CAACK,OAAF,GAAW,EAAjC;AACH,KAPD,MAQK;AACD;AACH;AACJ;;AAIG,sBACI;AAAQ,IAAA,EAAE,EAAC,QAAX;AAAoB,IAAA,WAAW,EAAER,SAAjC;AAA4C,IAAA,SAAS,EAAEC,OAAvD;AAAgE,IAAA,WAAW,EAAEC,IAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAIP;;AACD,eAAevB,MAAf","sourcesContent":["\nimport React, { useState, useEffect } from 'react';\n/*\nclass Canvas extends React.Component {\n    constructor(props) {\n        super(props) \n        this.state = {color:\"null\", painting:false }\n        this.ctx = ''\n        this.startdraw = this.startdraw.bind(this)\n        this.enddraw = this.enddraw.bind(this)\n        this.draw = this.draw.bind(this)\n        \n    }\n    componentDidMount() {\n        console.log(this.props.color)\n        const canvus = document.getElementById('canvus')\n        this.ctx = canvus.getContext('2d');\n        this.ctx.strokeStyle = this.props.color\n        canvus.height = window.innerHeight - window.innerHeight * 0.004\n        canvus.width = window.innerWidth - window.innerWidth * 0.004\n        window.addEventListener(\"resize\", () => {\n            canvus.height = window.innerHeight - window.innerHeight * 0.004\n            canvus.width = window.innerWidth - window.innerWidth * 0.004\n\n        });\n       \n    }\n    startdraw() {\n        this.setState({painting:true})\n    }\n    enddraw() {\n        \n        this.setState({painting:false})\n        this.ctx.beginPath();\n    }\n    draw(e) {\n        if (this.state.painting) {\n            this.ctx.lineWidth = 10;\n            this.ctx.lineCap = \"round\";\n            this.ctx.lineTo(e.clientX, e.clientY - 25);\n            this.ctx.stroke();\n            this.ctx.beginPath();\n            this.ctx.moveTo(e.clientX, e.clientY -25);\n        }\n        else {\n            return;\n        }\n    }\n\n    \n    render() {\n        return (\n            <canvas id=\"canvus\" onMouseDown={this.startdraw} onMouseUp={this.enddraw} onMouseMove={this.draw}/>\n        );\n    }\n}\n*/\nfunction Canvas(props) {\n    const [painting, setPainting] = useState(false);\n    const [ctx , setCtx] = useState(null)\n    console.log(props.color)\n    \n    useEffect(() => {\n      const canvus = document.getElementById('canvus') \n      const newctx = canvus.getContext('2d')\n      setCtx(newctx)\n      newctx.strokeStyle = props.color\n      canvus.height = window.innerHeight - window.innerHeight * 0.004\n      canvus.width = window.innerWidth - window.innerWidth * 0.004\n      window.addEventListener(\"resize\", () => {\n        canvus.height = window.innerHeight - window.innerHeight * 0.004\n        canvus.width = window.innerWidth - window.innerWidth * 0.004\n        }); \n      });\n\n    function startdraw() {\n        setPainting(true)\n    }\n    function enddraw() {\n  \n        setPainting(false)\n        //ctx.beginPath();\n    }\n    function draw(e) {\n        if (painting) {\n            ctx.lineWidth = 10;\n            ctx.lineCap = \"round\";\n            ctx.lineTo(e.clientX, e.clientY - 25);\n            ctx.stroke();\n            ctx.beginPath();\n            ctx.moveTo(e.clientX, e.clientY -25);\n        }\n        else {\n            return;\n        }\n    }\n\n    \n    \n        return (\n            <canvas id=\"canvus\" onMouseDown={startdraw} onMouseUp={enddraw} onMouseMove={draw}/>\n        );\n    \n}\nexport default Canvas;\n"]},"metadata":{},"sourceType":"module"}