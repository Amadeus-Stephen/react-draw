{"ast":null,"code":"var _jsxFileName = \"/home/vayne/Desktop/drawingthings/src/componets/canvus/canvus.jsx\";\nimport React from 'react';\n\nclass Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: \"null\"\n    };\n  }\n\n  componentDidMount() {\n    const canvus = document.getElementById('canvus');\n    const ctx = canvus.getContext('2d');\n    ctx.strokeStyle = this.props.color;\n    this.updateCanvas();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.color !== this.state.color) {\n      console.log('pokemons state has changed.');\n    }\n  }\n\n  updateCanvas() {\n    let painting = false;\n    canvus.height = window.innerHeight - window.innerHeight * 0.004;\n    canvus.width = window.innerWidth - window.innerWidth * 0.004;\n    canvus.addEventListener(\"mousedown\", startpostion);\n    canvus.addEventListener(\"mouseup\", endpostion);\n    canvus.addEventListener(\"mousemove\", draw(this.state.color));\n    window.addEventListener(\"resize\", () => {\n      canvus.height = window.innerHeight - window.innerHeight * 0.004;\n      canvus.width = window.innerWidth - window.innerWidth * 0.004;\n    });\n\n    function startpostion() {\n      painting = true;\n    }\n\n    function endpostion() {\n      painting = false;\n      ctx.beginPath();\n    }\n\n    function draw(e, color) {\n      console.log(color);\n      if (!painting) return;\n      ctx.lineWidth = 10;\n      ctx.lineCap = \"round\";\n      ctx.lineTo(e.clientX, e.clientY);\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.moveTo(e.clientX, e.clientY);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"canvus\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport default Canvas;","map":{"version":3,"sources":["/home/vayne/Desktop/drawingthings/src/componets/canvus/canvus.jsx"],"names":["React","Canvas","Component","constructor","props","state","color","componentDidMount","canvus","document","getElementById","ctx","getContext","strokeStyle","updateCanvas","componentDidUpdate","prevProps","prevState","console","log","painting","height","window","innerHeight","width","innerWidth","addEventListener","startpostion","endpostion","draw","beginPath","e","lineWidth","lineCap","lineTo","clientX","clientY","stroke","moveTo","render"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,MAAN,SAAqBD,KAAK,CAACE,SAA3B,CAAqC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,KAAK,EAAC;AAAP,KAAb;AAEH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB,UAAMC,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAf;AACA,UAAMC,GAAG,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ;AACAD,IAAAA,GAAG,CAACE,WAAJ,GAAkB,KAAKT,KAAL,CAAWE,KAA7B;AACA,SAAKQ,YAAL;AAEH;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACrC,QAAID,SAAS,CAACV,KAAV,KAAoB,KAAKD,KAAL,CAAWC,KAAnC,EAA0C;AACxCY,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACD;AACF;;AAGHL,EAAAA,YAAY,GAAG;AAMX,QAAIM,QAAQ,GAAG,KAAf;AACAZ,IAAAA,MAAM,CAACa,MAAP,GAAgBC,MAAM,CAACC,WAAP,GAAqBD,MAAM,CAACC,WAAP,GAAqB,KAA1D;AAGAf,IAAAA,MAAM,CAACgB,KAAP,GAAeF,MAAM,CAACG,UAAP,GAAoBH,MAAM,CAACG,UAAP,GAAoB,KAAvD;AAGAjB,IAAAA,MAAM,CAACkB,gBAAP,CAAwB,WAAxB,EAAqCC,YAArC;AACAnB,IAAAA,MAAM,CAACkB,gBAAP,CAAwB,SAAxB,EAAmCE,UAAnC;AACApB,IAAAA,MAAM,CAACkB,gBAAP,CAAwB,WAAxB,EAAqCG,IAAI,CAAC,KAAKxB,KAAL,CAAWC,KAAZ,CAAzC;AAMAgB,IAAAA,MAAM,CAACI,gBAAP,CAAwB,QAAxB,EAAkC,MAAM;AACpClB,MAAAA,MAAM,CAACa,MAAP,GAAgBC,MAAM,CAACC,WAAP,GAAqBD,MAAM,CAACC,WAAP,GAAqB,KAA1D;AACAf,MAAAA,MAAM,CAACgB,KAAP,GAAeF,MAAM,CAACG,UAAP,GAAoBH,MAAM,CAACG,UAAP,GAAoB,KAAvD;AAEH,KAJD;;AAQA,aAASE,YAAT,GAAwB;AACpBP,MAAAA,QAAQ,GAAG,IAAX;AACH;;AAED,aAASQ,UAAT,GAAsB;AAClBR,MAAAA,QAAQ,GAAG,KAAX;AACAT,MAAAA,GAAG,CAACmB,SAAJ;AACH;;AAED,aAASD,IAAT,CAAcE,CAAd,EAAkBzB,KAAlB,EAAyB;AACrBY,MAAAA,OAAO,CAACC,GAAR,CAAYb,KAAZ;AACA,UAAI,CAACc,QAAL,EAAe;AACfT,MAAAA,GAAG,CAACqB,SAAJ,GAAgB,EAAhB;AACArB,MAAAA,GAAG,CAACsB,OAAJ,GAAc,OAAd;AACAtB,MAAAA,GAAG,CAACuB,MAAJ,CAAWH,CAAC,CAACI,OAAb,EAAsBJ,CAAC,CAACK,OAAxB;AAEAzB,MAAAA,GAAG,CAAC0B,MAAJ;AACA1B,MAAAA,GAAG,CAACmB,SAAJ;AACAnB,MAAAA,GAAG,CAAC2B,MAAJ,CAAWP,CAAC,CAACI,OAAb,EAAsBJ,CAAC,CAACK,OAAxB;AACH;AAEJ;;AACDG,EAAAA,MAAM,GAAG;AACL,wBACI;AAAQ,MAAA,EAAE,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH;;AA5EgC;;AA8ErC,eAAetC,MAAf","sourcesContent":["\nimport React from 'react';\n\nclass Canvas extends React.Component {\n    constructor(props) {\n        super(props) \n        this.state = {color:\"null\"}\n        \n    }\n    componentDidMount() {\n        const canvus = document.getElementById('canvus')\n        const ctx = canvus.getContext('2d');\n        ctx.strokeStyle = this.props.color\n        this.updateCanvas();\n       \n    }\n    \n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.color !== this.state.color) {\n          console.log('pokemons state has changed.')\n        }\n      }\n      \n    \n    updateCanvas() {\n        \n\n        \n        \n        \n        let painting = false;\n        canvus.height = window.innerHeight - window.innerHeight * 0.004\n\n\n        canvus.width = window.innerWidth - window.innerWidth * 0.004\n\n     \n        canvus.addEventListener(\"mousedown\", startpostion);\n        canvus.addEventListener(\"mouseup\", endpostion);\n        canvus.addEventListener(\"mousemove\", draw(this.state.color));\n\n\n\n\n\n        window.addEventListener(\"resize\", () => {\n            canvus.height = window.innerHeight - window.innerHeight * 0.004\n            canvus.width = window.innerWidth - window.innerWidth * 0.004\n\n        });\n\n\n\n        function startpostion() {\n            painting = true;\n        }\n\n        function endpostion() {\n            painting = false;\n            ctx.beginPath();\n        }\n\n        function draw(e , color) {\n            console.log(color)\n            if (!painting) return;\n            ctx.lineWidth = 10;\n            ctx.lineCap = \"round\";\n            ctx.lineTo(e.clientX, e.clientY);\n            \n            ctx.stroke();\n            ctx.beginPath();\n            ctx.moveTo(e.clientX, e.clientY);\n        }\n        \n    }\n    render() {\n        return (\n            <canvas id=\"canvus\" />\n        );\n    }\n}\nexport default Canvas;\n"]},"metadata":{},"sourceType":"module"}