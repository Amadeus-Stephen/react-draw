{"ast":null,"code":"var _jsxFileName = \"/home/vayne/Desktop/drawingthings/src/componets/canvus/canvus.jsx\";\nimport React from 'react';\n\nclass Canvas extends React.Component {\n  componentDidMount() {\n    this.updateCanvas();\n  }\n\n  updateCanvas() {\n    const canvus = document.getElementById('canvus');\n    const ctx = canvus.getContext('2d');\n    let color = this.props.color;\n\n    if (color !== this.props.color) {\n      console.log(this.props.color);\n    }\n\n    let painting = false;\n    canvus.height = window.innerHeight - window.innerHeight * 0.004;\n    canvus.width = window.innerWidth - window.innerWidth * 0.004;\n    canvus.addEventListener(\"mousedown\", startpostion);\n    canvus.addEventListener(\"mouseup\", endpostion);\n    canvus.addEventListener(\"mousemove\", draw);\n    window.addEventListener(\"resize\", () => {\n      canvus.height = window.innerHeight - window.innerHeight * 0.004;\n      canvus.width = window.innerWidth - window.innerWidth * 0.004;\n    });\n\n    function startpostion() {\n      painting = true;\n    }\n\n    function endpostion() {\n      painting = false;\n      ctx.beginPath();\n    }\n\n    function draw(e) {\n      if (!painting) return;\n      ctx.lineWidth = 10;\n      ctx.lineCap = \"round\";\n      ctx.lineTo(e.clientX, e.clientY);\n      ctx.strokeStyle = color;\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.moveTo(e.clientX, e.clientY);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"canvus\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport default Canvas;","map":{"version":3,"sources":["/home/vayne/Desktop/drawingthings/src/componets/canvus/canvus.jsx"],"names":["React","Canvas","Component","componentDidMount","updateCanvas","canvus","document","getElementById","ctx","getContext","color","props","console","log","painting","height","window","innerHeight","width","innerWidth","addEventListener","startpostion","endpostion","draw","beginPath","e","lineWidth","lineCap","lineTo","clientX","clientY","strokeStyle","stroke","moveTo","render"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,MAAN,SAAqBD,KAAK,CAACE,SAA3B,CAAqC;AAEjCC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,YAAL;AACH;;AACDA,EAAAA,YAAY,GAAG;AAEX,UAAMC,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAf;AACA,UAAMC,GAAG,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ;AACA,QAAIC,KAAK,GAAG,KAAKC,KAAL,CAAWD,KAAvB;;AACA,QAAIA,KAAK,KAAK,KAAKC,KAAL,CAAWD,KAAzB,EAAgC;AAC5BE,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKF,KAAL,CAAWD,KAAvB;AACH;;AAED,QAAII,QAAQ,GAAG,KAAf;AACAT,IAAAA,MAAM,CAACU,MAAP,GAAgBC,MAAM,CAACC,WAAP,GAAqBD,MAAM,CAACC,WAAP,GAAqB,KAA1D;AAGAZ,IAAAA,MAAM,CAACa,KAAP,GAAeF,MAAM,CAACG,UAAP,GAAoBH,MAAM,CAACG,UAAP,GAAoB,KAAvD;AAGAd,IAAAA,MAAM,CAACe,gBAAP,CAAwB,WAAxB,EAAqCC,YAArC;AACAhB,IAAAA,MAAM,CAACe,gBAAP,CAAwB,SAAxB,EAAmCE,UAAnC;AACAjB,IAAAA,MAAM,CAACe,gBAAP,CAAwB,WAAxB,EAAqCG,IAArC;AAMAP,IAAAA,MAAM,CAACI,gBAAP,CAAwB,QAAxB,EAAkC,MAAM;AACpCf,MAAAA,MAAM,CAACU,MAAP,GAAgBC,MAAM,CAACC,WAAP,GAAqBD,MAAM,CAACC,WAAP,GAAqB,KAA1D;AACAZ,MAAAA,MAAM,CAACa,KAAP,GAAeF,MAAM,CAACG,UAAP,GAAoBH,MAAM,CAACG,UAAP,GAAoB,KAAvD;AAEH,KAJD;;AAQA,aAASE,YAAT,GAAwB;AACpBP,MAAAA,QAAQ,GAAG,IAAX;AACH;;AAED,aAASQ,UAAT,GAAsB;AAClBR,MAAAA,QAAQ,GAAG,KAAX;AACAN,MAAAA,GAAG,CAACgB,SAAJ;AACH;;AAED,aAASD,IAAT,CAAcE,CAAd,EAAiB;AACb,UAAI,CAACX,QAAL,EAAe;AACfN,MAAAA,GAAG,CAACkB,SAAJ,GAAgB,EAAhB;AACAlB,MAAAA,GAAG,CAACmB,OAAJ,GAAc,OAAd;AAEAnB,MAAAA,GAAG,CAACoB,MAAJ,CAAWH,CAAC,CAACI,OAAb,EAAsBJ,CAAC,CAACK,OAAxB;AACAtB,MAAAA,GAAG,CAACuB,WAAJ,GAAkBrB,KAAlB;AACAF,MAAAA,GAAG,CAACwB,MAAJ;AACAxB,MAAAA,GAAG,CAACgB,SAAJ;AACAhB,MAAAA,GAAG,CAACyB,MAAJ,CAAWR,CAAC,CAACI,OAAb,EAAsBJ,CAAC,CAACK,OAAxB;AACH;AAEJ;;AACDI,EAAAA,MAAM,GAAG;AACL,wBACI;AAAQ,MAAA,EAAE,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH;;AA/DgC;;AAiErC,eAAejC,MAAf","sourcesContent":["\nimport React from 'react';\n\nclass Canvas extends React.Component {\n \n    componentDidMount() {\n        this.updateCanvas();\n    }\n    updateCanvas() {\n\n        const canvus = document.getElementById('canvus')\n        const ctx = canvus.getContext('2d');\n        let color = this.props.color\n        if (color !== this.props.color) {\n            console.log(this.props.color)\n        }\n        \n        let painting = false;\n        canvus.height = window.innerHeight - window.innerHeight * 0.004\n\n\n        canvus.width = window.innerWidth - window.innerWidth * 0.004\n\n     \n        canvus.addEventListener(\"mousedown\", startpostion);\n        canvus.addEventListener(\"mouseup\", endpostion);\n        canvus.addEventListener(\"mousemove\", draw);\n\n\n\n\n\n        window.addEventListener(\"resize\", () => {\n            canvus.height = window.innerHeight - window.innerHeight * 0.004\n            canvus.width = window.innerWidth - window.innerWidth * 0.004\n\n        });\n\n\n\n        function startpostion() {\n            painting = true;\n        }\n\n        function endpostion() {\n            painting = false;\n            ctx.beginPath();\n        }\n\n        function draw(e) {\n            if (!painting) return;\n            ctx.lineWidth = 10;\n            ctx.lineCap = \"round\";\n\n            ctx.lineTo(e.clientX, e.clientY);\n            ctx.strokeStyle = color\n            ctx.stroke();\n            ctx.beginPath();\n            ctx.moveTo(e.clientX, e.clientY);\n        }\n        \n    }\n    render() {\n        return (\n            <canvas id=\"canvus\" />\n        );\n    }\n}\nexport default Canvas;\n"]},"metadata":{},"sourceType":"module"}